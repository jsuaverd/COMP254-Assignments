No, in a circularly linked list it is not necessary to have a node pointing to a null value because the succeeding reference of the tail node points to the head of the list creating a cyclic order. Because of this, the time taken when searching for an element in a circular linked list grows proportionally to the list size.

For example, you are shopping for a new foundation and the foundations are displayed in multiple rotating shelf displays with different rows similar to this. You have to rotate through each row and each shelf until you find the foundation that matches your skin tone. The best-case scenario is you find the foundation you need from the first row of the first shelf that you search through. The worst-case scenario is you find your shade match at the very last row of the last shelf that you look at. While the average-case is that you find your shade match somewhere between all of the shelves that you’re looking at. In this example, the best-case scenario has the shortest running time; the worst-case has the longest running time; and the average-case has the running time that is ​​averaged over all possible inputs. It can be seen in this example that the running time of a circularly linked list should grow as its size grows as well.